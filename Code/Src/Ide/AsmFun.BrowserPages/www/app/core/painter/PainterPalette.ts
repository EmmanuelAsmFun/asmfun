import { AsmTools, ASMStorage } from "../../Tools.js";
import { IPaletteData, IPaletteColor, NewEmptyColor, NewPalette } from "../../data/PaletteData.js";

export class PainterPalette {
  
   

    private rawData?: Uint8Array;
    private palette: IPaletteData = NewPalette();
    private defaultPalette = [
        0x000, 0xfff, 0x800, 0xafe, 0xc4c, 0x0c5, 0x00a, 0xee7, 0xd85, 0x640, 0xf77, 0x333, 0x777, 0xaf6, 0x08f, 0xbbb, // 0
        0x000, 0x111, 0x222, 0x333, 0x444, 0x555, 0x666, 0x777, 0x888, 0x999, 0xaaa, 0xbbb, 0xccc, 0xddd, 0xeee, 0xfff, // 1
        0x211, 0x433, 0x644, 0x866, 0xa88, 0xc99, 0xfbb, 0x211, 0x422, 0x633, 0x844, 0xa55, 0xc66, 0xf77, 0x200, 0x411, // 2
        0x611, 0x822, 0xa22, 0xc33, 0xf33, 0x200, 0x400, 0x600, 0x800, 0xa00, 0xc00, 0xf00, 0x221, 0x443, 0x664, 0x886, // 3
        0xaa8, 0xcc9, 0xfeb, 0x211, 0x432, 0x653, 0x874, 0xa95, 0xcb6, 0xfd7, 0x210, 0x431, 0x651, 0x862, 0xa82, 0xca3, // 4
        0xfc3, 0x210, 0x430, 0x640, 0x860, 0xa80, 0xc90, 0xfb0, 0x121, 0x343, 0x564, 0x786, 0x9a8, 0xbc9, 0xdfb, 0x121, // 5
        0x342, 0x463, 0x684, 0x8a5, 0x9c6, 0xbf7, 0x120, 0x241, 0x461, 0x582, 0x6a2, 0x8c3, 0x9f3, 0x120, 0x240, 0x360, // 6
        0x480, 0x5a0, 0x6c0, 0x7f0, 0x121, 0x343, 0x465, 0x686, 0x8a8, 0x9ca, 0xbfc, 0x121, 0x242, 0x364, 0x485, 0x5a6, // 7
        0x6c8, 0x7f9, 0x020, 0x141, 0x162, 0x283, 0x2a4, 0x3c5, 0x3f6, 0x020, 0x041, 0x061, 0x082, 0x0a2, 0x0c3, 0x0f3, // 8
        0x122, 0x344, 0x466, 0x688, 0x8aa, 0x9cc, 0xbff, 0x122, 0x244, 0x366, 0x488, 0x5aa, 0x6cc, 0x7ff, 0x022, 0x144, // 9
        0x166, 0x288, 0x2aa, 0x3cc, 0x3ff, 0x022, 0x044, 0x066, 0x088, 0x0aa, 0x0cc, 0x0ff, 0x112, 0x334, 0x456, 0x668, // 10
        0x88a, 0x9ac, 0xbcf, 0x112, 0x224, 0x346, 0x458, 0x56a, 0x68c, 0x79f, 0x002, 0x114, 0x126, 0x238, 0x24a, 0x35c, // 11
        0x36f, 0x002, 0x014, 0x016, 0x028, 0x02a, 0x03c, 0x03f, 0x112, 0x334, 0x546, 0x768, 0x98a, 0xb9c, 0xdbf, 0x112, // 12
        0x324, 0x436, 0x648, 0x85a, 0x96c, 0xb7f, 0x102, 0x214, 0x416, 0x528, 0x62a, 0x83c, 0x93f, 0x102, 0x204, 0x306, // 13
        0x408, 0x50a, 0x60c, 0x70f, 0x212, 0x434, 0x646, 0x868, 0xa8a, 0xc9c, 0xfbe, 0x211, 0x423, 0x635, 0x847, 0xa59, // 14
        0xc6b, 0xf7d, 0x201, 0x413, 0x615, 0x826, 0xa28, 0xc3a, 0xf3c, 0x201, 0x403, 0x604, 0x806, 0xa08, 0xc09, 0xf0b]; // 15

    public SetDefaultPalette() {
        var arr = new Uint8Array(this.defaultPalette.length * 2);
        for (var i = 0; i < this.defaultPalette.length; i++) {
            arr[i * 2 + 1] = this.defaultPalette[i] >> 8;
            arr[i * 2 ] = this.defaultPalette[i] & 0xff;
        }
        this.Parse2ByteColors(arr);
    }


    public Init(palette: IPaletteData) {
        this.palette = palette;
        this.palette.changeColor = c => { this.palette.selectedColor = c; }
    }

    public Parse2ByteColors(data: Uint8Array) {
        this.rawData = data;
        var entries = this.Array2ByteToColors(data);
        this.palette.colors = entries;
    }

    private Array2ByteToColors(data: Uint8Array): IPaletteColor[] {
        var entries: IPaletteColor[] = [];
        for (var i = 0; i < data.length; i += 2) {
            var byte1: number = data[i];
            var byte2: number = data[i + 1];
            var entry: number = byte1 << 4 | byte2;
            var g = (((entry >> 8) & 0xf) << 4 | ((entry >> 8) & 0xf));
            var b = (((entry >> 4) & 0xf) << 4 | ((entry >> 4) & 0xf));
            var r = ((entry & 0xf) << 4 | (entry & 0xf));
            var numColor = (r << 16) | (g << 8) | (b);
            entries.push({
                colorNumber: numColor,
                colorRGB: r + "," + g + "," + b,
                colorHex: "#" + AsmTools.numToHex5(numColor),
                r: r, g: g, b: b,
                index: (i / 2),
            });
        }
        return entries;
    }

    public SelectColor(index: number) {
        this.palette.selectedColor = this.palette.colors[index];
    }

    public GetSelectedColorIndex(): number {
        return this.palette.selectedColor != null? this.palette.selectedColor.index : 0;
    }

    public GetColor(colorIndex: number): IPaletteColor {
        if (this.palette == null || this.palette.colors.length === 0) return NewEmptyColor();
        return this.palette.colors[colorIndex];
    }

    public MemoryDump() {
        if (this.rawData == null) return;
        ASMStorage.SaveDataToFile(this.rawData, "Palette_" + ASMStorage.GetNowForFile() + ".bin");
    }

    public GetRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
}